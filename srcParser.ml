type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | LPAREN
  | RPAREN
  | LAM
  | DOT
  | LET
  | EQUALS
  | IN
  | EOF

open Parsing;;
# 2 "srcParser.mly"
open Types
# 18 "srcParser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LAM *);
  263 (* DOT *);
  264 (* LET *);
  265 (* EQUALS *);
  266 (* IN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\006\000\004\000\004\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\001\000\008\000\000\000\
\000\000\000\000\004\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\008\000\009\000"

let yysindex = "\255\255\
\028\255\000\000\000\000\000\000\028\255\001\255\002\255\000\000\
\005\000\020\255\005\255\255\254\028\255\000\000\000\000\013\255\
\028\255\028\255\000\000\000\000\006\255\003\255\028\255\006\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\011\000"

let yygindex = "\000\000\
\000\000\253\255"

let yytablesize = 277
let yytable = "\001\000\
\006\000\010\000\011\000\012\000\014\000\013\000\016\000\018\000\
\013\000\019\000\005\000\017\000\023\000\021\000\022\000\013\000\
\000\000\020\000\000\000\024\000\003\000\004\000\013\000\005\000\
\015\000\006\000\000\000\007\000\003\000\004\000\000\000\005\000\
\000\000\006\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\006\000\000\000\006\000\006\000\006\000\013\000\
\006\000\000\000\006\000\005\000\005\000\000\000\005\000\005\000\
\005\000\000\000\005\000\000\000\005\000"

let yycheck = "\001\000\
\000\000\005\000\002\001\002\001\000\000\003\001\010\000\009\001\
\003\001\013\000\000\000\007\001\010\001\017\000\018\000\003\001\
\255\255\005\001\255\255\023\000\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\008\001\001\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\003\001\
\008\001\255\255\010\001\001\001\002\001\255\255\004\001\005\001\
\006\001\255\255\008\001\255\255\010\001"

let yynames_const = "\
  PLUS\000\
  LPAREN\000\
  RPAREN\000\
  LAM\000\
  DOT\000\
  LET\000\
  EQUALS\000\
  IN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 27 "srcParser.mly"
                          ( _1 )
# 164 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 29 "srcParser.mly"
                                                     ( Num _1 )
# 171 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 30 "srcParser.mly"
                                                     ( Var _1 )
# 178 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 31 "srcParser.mly"
                                                     ( Plus(_1, _3) )
# 186 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 32 "srcParser.mly"
                                                     ( Let (_2, _4, _6)  )
# 195 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 33 "srcParser.mly"
                                                     ( Lambda (_2, _4) )
# 203 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 34 "srcParser.mly"
                                                     ( App (_2, _3) )
# 211 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 35 "srcParser.mly"
                                                     ( _2 )
# 218 "srcParser.ml"
               : Types.exp))
(* Entry parse *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parse (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.exp)
