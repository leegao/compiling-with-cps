type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | POUND
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LAM
  | DOT
  | LET
  | EQUALS
  | IN
  | IFP
  | THEN
  | ELSE
  | CWCC
  | EOF

open Parsing;;
# 2 "srcParser.mly"
open Types
# 26 "srcParser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* POUND *);
  261 (* COMMA *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* LBRACK *);
  265 (* RBRACK *);
  266 (* LAM *);
  267 (* DOT *);
  268 (* LET *);
  269 (* EQUALS *);
  270 (* IN *);
  271 (* IFP *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* CWCC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\006\000\006\000\004\000\004\000\
\003\000\003\000\003\000\002\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\010\000\
\011\000\000\000\000\000\009\000\000\000\000\000\000\000\004\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\012\000\013\000\017\000"

let yysindex = "\012\000\
\056\255\000\000\000\000\000\000\014\255\056\255\056\255\019\255\
\020\255\056\255\056\255\000\000\009\000\056\255\038\255\027\255\
\003\255\025\255\018\255\001\255\027\255\056\255\000\000\000\000\
\000\000\017\255\056\255\000\000\056\255\056\255\056\255\000\000\
\000\000\027\255\027\255\002\255\253\254\056\255\056\255\027\255\
\027\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\255\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\255\019\000\000\000\000\000\000\000\000\000\037\000\
\055\000"

let yygindex = "\000\000\
\000\000\252\255\000\000"

let yytablesize = 329
let yytable = "\022\000\
\012\000\015\000\016\000\022\000\022\000\020\000\021\000\027\000\
\023\000\024\000\026\000\028\000\001\000\039\000\014\000\038\000\
\031\000\032\000\007\000\022\000\018\000\019\000\034\000\033\000\
\035\000\036\000\037\000\013\000\014\000\022\000\030\000\013\000\
\014\000\040\000\041\000\029\000\006\000\000\000\003\000\004\000\
\022\000\005\000\000\000\006\000\025\000\007\000\000\000\008\000\
\000\000\009\000\000\000\000\000\010\000\000\000\005\000\011\000\
\003\000\004\000\000\000\005\000\000\000\006\000\000\000\007\000\
\000\000\008\000\000\000\009\000\000\000\000\000\010\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\022\000\012\000\000\000\012\000\012\000\
\012\000\012\000\012\000\007\000\007\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\000\000\
\007\000\007\000\007\000\007\000\007\000\006\000\006\000\000\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\
\006\000\000\000\006\000\006\000\006\000\006\000\006\000\005\000\
\005\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\000\000\005\000\000\000\005\000\005\000\005\000\005\000\
\005\000"

let yycheck = "\003\001\
\000\000\006\000\007\000\003\001\003\001\010\000\011\000\005\001\
\000\000\014\000\015\000\009\001\001\000\017\001\001\001\014\001\
\016\001\022\000\000\000\003\001\002\001\002\001\027\000\007\001\
\029\000\030\000\031\000\005\001\005\001\003\001\013\001\009\001\
\009\001\038\000\039\000\011\001\000\000\255\255\001\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\255\255\000\000\018\001\
\001\001\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\015\001\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\003\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\015\001\016\001\017\001\018\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001"

let yynames_const = "\
  PLUS\000\
  POUND\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LAM\000\
  DOT\000\
  LET\000\
  EQUALS\000\
  IN\000\
  IFP\000\
  THEN\000\
  ELSE\000\
  CWCC\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 34 "srcParser.mly"
                          ( _1 )
# 211 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "srcParser.mly"
                                                     ( Num _1 )
# 218 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "srcParser.mly"
                                                     ( Var _1 )
# 225 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 38 "srcParser.mly"
                                                     ( Plus(_1, _3) )
# 233 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Types.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 39 "srcParser.mly"
                                                     ( Ifp (_2, _4, _6) )
# 242 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 40 "srcParser.mly"
                                                     ( Let (_2, _4, _6)  )
# 251 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 41 "srcParser.mly"
                                                     ( Lambda (_2, _4) )
# 259 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 42 "srcParser.mly"
                                                     ( App (_2, _3) )
# 267 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 43 "srcParser.mly"
                                                     ( Tuple (_2) )
# 274 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 44 "srcParser.mly"
                                                     ( Index (_2, _3) )
# 282 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.exp) in
    Obj.repr(
# 45 "srcParser.mly"
                                                     ( _2 )
# 289 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 46 "srcParser.mly"
                                                     ( Cwcc (_2) )
# 296 "srcParser.ml"
               : Types.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 50 "srcParser.mly"
                                                     ([_1])
# 303 "srcParser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Types.exp) in
    Obj.repr(
# 51 "srcParser.mly"
                                                     (List.rev (_3::(List.rev _1)) )
# 311 "srcParser.ml"
               : 'expr_list))
(* Entry parse *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parse (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.exp)
